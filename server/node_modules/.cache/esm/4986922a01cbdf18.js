let mongoose,bcrypt;_01c‍.x([["default",()=>_01c‍.o]]);_01c‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_01c‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

const { Schema } = mongoose;

const userSchema = new Schema(
  {
    name: {
      type: String,
      trim: true,
      required: "Name is required",
    },
    email: {
      type: String,
      trim: true,
      required: "Email is required",
      unique: true,
    },
    password: {
      type: String,
      required: true,
      min: 6,
      max: 64,
    },
    stripe_account_id: "",
    stripe_seller: {},
    stripeSession: {},
  },
  { timestamps: true }
);



userSchema.pre("save", function (next) {
  let user = this;

  if (user.isModified("password")) {
    return bcrypt.hash(user.password, 12, function (err, hash) {
      if (err) {
        _01c‍.g.console.log("BCRYPT HASH ERR ", err);
        return next(err);
      }
      user.password = hash;
      return next();
    });
  } else {
    return next();
  }
});

userSchema.methods.comparePassword = function (password, next){
  bcrypt.compare(password, this.password, function(err, match)
  {
    if(err){
      _01c‍.g.console.log("Compare password failed", err);
      return next(err, false);
    }
    _01c‍.g.console.log("Password Matched", match);
    return next(null, match);

  })
}

_01c‍.d(mongoose.model("User", userSchema));
